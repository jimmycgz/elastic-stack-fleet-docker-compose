---
# - name: Check required variables
#   assert:
#     that:
#       - kibana_fleet_host is defined
#       - fleet_host is defined
#       - elastic_password is defined
#       - stack_version is defined
#     fail_msg: "Required variables are not set. Please set KIBANA_FLEET_HOST, FLEET_HOST, ELASTIC_PASSWORD, and STACK_VERSION."

# - name: Detect OS
#   command: cat /etc/os-release
#   register: os_release
#   changed_when: false

# - name: Set OS facts
#   set_fact:
#     os_name: "{{ os_release.stdout | regex_search('NAME=\"(.*)\"', '\\1') | first }}"
#     os_version: "{{ os_release.stdout | regex_search('VERSION_ID=\"(.*)\"', '\\1') | first }}"

# - name: Display detected OS
#   debug:
#     msg: "Detected OS: {{ os_name }} {{ os_version }}"

- name: Update apt cache
  apt:
    update_cache: yes
  become: yes

- name: Install dependencies
  apt:
    name:
      - curl
      - jq
    state: present
  become: yes

- name: Fetch enrollment tokens
  uri:
    url: "{{ kibana_fleet_host }}/api/fleet/enrollment-api-keys"
    method: GET
    user: elastic
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    validate_certs: no
    return_content: yes
    headers:
      kbn-xsrf: "true"
  register: enrollment_tokens

- name: Parse agent token
  set_fact:
    agent_token: "{{ (enrollment_tokens.json.list | selectattr('policy_id', 'ne', 'fleet-server-policy') | selectattr('name', 'search', 'Default') | map(attribute='api_key') | list)[0] | default('') }}"

- name: Create new policy if not found
  block:
    - name: Create new policy
      uri:
        url: "{{ kibana_fleet_host }}/api/fleet/agent_policies"
        method: POST
        user: elastic
        password: "{{ elastic_password }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        body:
          name: "Default Policy"
          namespace: "default"
          description: "Default policy created by Ansible"
          monitoring_enabled: ["logs", "metrics"]
        headers:
          kbn-xsrf: "true"
      register: new_policy

    - name: Create new enrollment token
      uri:
        url: "{{ kibana_fleet_host }}/api/fleet/enrollment-api-keys"
        method: POST
        user: elastic
        password: "{{ elastic_password }}"
        force_basic_auth: yes
        validate_certs: no
        body_format: json
        body:
          policy_id: "{{ new_policy.json.item.id }}"
        headers:
          kbn-xsrf: "true"
      register: new_token

    - name: Set agent token from new token
      set_fact:
        agent_token: "{{ new_token.json.item.api_key }}"
  when: not agent_token

- name: Display Agent Enrollment Token
  debug:
    var: agent_token

- name: Remove existing Elastic Agent installation
  file:
    path: /opt/Elastic/Agent
    state: absent
  become: yes

- name: Ensure Elastic Agent directory exists
  file:
    path: /opt/Elastic/Agent
    state: directory
    mode: '0755'
  become: yes

- name: Download Elastic Agent
  get_url:
    url: "https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-{{ stack_version }}-linux-x86_64.tar.gz"
    dest: "/tmp/elastic-agent-{{ stack_version }}-linux-x86_64.tar.gz"
  become: yes

- name: Extract Elastic Agent
  unarchive:
    src: "/tmp/elastic-agent-{{ stack_version }}-linux-x86_64.tar.gz"
    dest: "/opt/Elastic/Agent"
    remote_src: yes
    extra_opts: [--strip-components=1]
  become: yes

- name: Clean up downloaded archive
  file:
    path: "/tmp/elastic-agent-{{ stack_version }}-linux-x86_64.tar.gz"
    state: absent
  become: yes

- name: Configure and start Elastic Agent
  block:
    - name: Install Elastic Agent
      command:
        cmd: >
          ./elastic-agent install
          --url={{ fleet_host }}
          --enrollment-token={{ agent_token }}
          --non-interactive
          --insecure
          --force
      args:
        chdir: /opt/Elastic/Agent
      become: yes

    - name: Enable and start Elastic Agent service
      systemd:
        name: elastic-agent
        enabled: yes
        state: started
      become: yes

- name: Elastic Agent setup completed
  debug:
    msg: "Elastic Agent setup completed successfully"